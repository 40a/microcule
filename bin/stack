#!/usr/bin/env node

var stack = require('../');
var http = require('resource-http');
var config = require('../config');
// parse incoming command line arguments
var argv = require('minimist')(process.argv.slice(2));
var script = argv._[0];

config.SERVICE_MAX_TIMEOUT = argv.t ||  argv.timeout || config.SERVICE_MAX_TIMEOUT;
config.http = config.http || {};
config.http.host = argv.h ||  argv.host || config.http.host;
config.http.port = argv.p ||  argv.port || config.http.port;
config.watch = argv.w ||  argv.watch || config.watch;

if (typeof argv.v !== "undefined" || typeof argv.version !== "undefined") {
  console.log('1.0.0');
  process.exit();
}

if (script === "help") {
  showHelp();
  process.exit();
}

if (typeof script === "undefined") {
  console.log('path to script is a required argument');
  showHelp();
  process.exit();
}

var path = require('path');
var requireServiceSync = require('../lib/requireServiceSync');

var logger = require('../lib/plugins/logger');
var mschema = require('../lib/plugins/mschema');
var bodyParser = require('../lib/plugins/bodyParser');
var viewPresenter = require('../lib/plugins/viewPresenter');

var servicePath = path.resolve(process.cwd() + "/" + script);
var _service = requireServiceSync({ path: servicePath });

// language override
if (typeof argv.l !== "undefined" || typeof argv.language !== "undefined") {
  _service.language = argv.l || argv.language;
}

startServer(_service);

function showHelp () {
  console.log('Usage: stack [command] [options] ./path/to/script.foo');
  console.log(' ');
  console.log('Commands:');
  console.log(' ');
  console.log('  help  Display help');
  console.log(' ');
  console.log('Options:');
  console.log('  -t, --timeout <number>  Sets max timeout of service in milliseconds');
  console.log('  -h, --host <value>      Host to listen on');
  console.log('  -p, --port <number>     Port to listen on');
  console.log('  -l, --language <value>  Target programming language');
  console.log('  -w, --watch <bool>      Reloads source files on every request ( dev only )');
  console.log('  -v, --version           Output the version number');
}

function startServer (_service) {
  http.listen(config.http, function(err, app){
    var addr = app.server.address();

    if (typeof _service.schema === "object") {
      console.log('using schema for service. see: mschema for more details')
      console.log(_service.schema);
    }

    if (_service.view && _service.view.length > 0 ) {
      console.log('using view for service')
    }

    if (typeof _service.presenter === "function") {
      console.log('using presenter for service')
    }

    console.log(_service.language + ' stack started at: http://' +  addr.address + ":" + addr.port);

    config.env = process.env;

    app.use(logger());
    app.use(bodyParser());

    if (_service.schema) {
      app.use(mschema(_service.schema));
    }

    /*
    if (_service.view) {
      app.use(viewPresenter({
        view: _service.view,
        presenter: _service.presenter
      }));
    }
    */
    app.use(function watchSpawn (req, res, next) {
      // Remark: If config.watch or argv is detected, reload the script on every request
      // TODO: we could use an MD5 checksum or mtime to only reload the script on actual changes
      if (config.watch === "true" || config.watch === true) {
        // TODO: fix / add back the working async requireService method
        /*
        requireService({ path: process.cwd() + "/" + script, language: targetLang }, function (err, __service) {
          if (err) {
            throw err;
          }
          spawnService(__service);
        });
        */
        spawnService(requireServiceSync({ path: servicePath }));
      } else {
        spawnService(_service)
      }
      function spawnService (service) {
        stack.spawn({
          code: service.code,
          schema: service.schema,
          view: service.view,
          presenter: service.presenter,
          language: service.language,
          config: config
        })(req, res, next);
      }
    });
  });
}